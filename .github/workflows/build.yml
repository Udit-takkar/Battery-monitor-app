name: Build and Release

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    runs-on: macos-latest
    env:
      KEYCHAIN_PATH: build.keychain
      KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}

    steps:
      - uses: actions/checkout@v2

      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Import Certificate
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        run: |
          echo "Current directory: $(pwd)"

          # Create keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security default-keychain -s $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -t 3600 -u $KEYCHAIN_PATH

          # Debug: Decode certificate and check
          echo "$BUILD_CERTIFICATE_BASE64" | base64 --decode > certificate.p12
          echo "Certificate file size: $(ls -l certificate.p12)"

          # Import certificate
          echo "Importing certificate..."
          security import certificate.p12 -k $KEYCHAIN_PATH -P "$P12_PASSWORD" -T /usr/bin/codesign

          echo "Setting partition list..."
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          echo "Listing keychains..."
          security list-keychains

          echo "Listing identities in keychain..."
          security find-identity -v -p codesigning $KEYCHAIN_PATH

      - name: Build App
        run: |
          echo "Unlocking keychain..."
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          echo "Available certificates:"
          security find-identity -v -p codesigning $KEYCHAIN_PATH

          CERTIFICATE_ID=$(security find-identity -v -p codesigning $KEYCHAIN_PATH | grep "Mac Development" | head -1 | awk '{print $2}')
          echo "Certificate ID: $CERTIFICATE_ID"

          if [ -z "$CERTIFICATE_ID" ]; then
            echo "No certificate found, using ad-hoc signing"
            CERTIFICATE_ID="-"
          fi

          xcodebuild -project BatteryMonitor.xcodeproj \
            -scheme BatteryMonitor \
            -configuration Release \
            -derivedDataPath build \
            CODE_SIGN_STYLE=Manual \
            CODE_SIGN_IDENTITY="$CERTIFICATE_ID" \
            OTHER_CODE_SIGN_FLAGS="--keychain $KEYCHAIN_PATH"

      - name: Create DMG
        run: |
          echo "Unlocking keychain for DMG creation..."
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          cd build/Build/Products/Release/

          echo "Available certificates for DMG signing:"
          security find-identity -v -p codesigning $KEYCHAIN_PATH

          CERTIFICATE_ID=$(security find-identity -v -p codesigning $KEYCHAIN_PATH | grep "Mac Development" | head -1 | awk '{print $2}')
          if [ -z "$CERTIFICATE_ID" ]; then
            echo "No certificate found, using ad-hoc signing"
            CERTIFICATE_ID="-"
          fi
          echo "Using certificate: $CERTIFICATE_ID"

          echo "Signing app..."
          codesign --force --deep --sign "$CERTIFICATE_ID" --keychain $KEYCHAIN_PATH BatteryMonitor.app

          echo "Creating DMG..."
          hdiutil create -volname "Battery Monitor" -srcfolder BatteryMonitor.app -ov -format UDZO BatteryMonitor.dmg

          echo "Signing DMG..."
          codesign --force --sign "$CERTIFICATE_ID" --keychain $KEYCHAIN_PATH BatteryMonitor.dmg

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: build/Build/Products/Release/BatteryMonitor.dmg
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
